{"version":3,"file":"content.bundle.js","mappings":"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","sources":["webpack://focus/./src/content.js"],"sourcesContent":["// List of sites that get completely blocked (Stage 1 behavior)\nconst COMPLETELY_BLOCKED_SITES = [\n  \"facebook.com\",\n  \"www.facebook.com\",\n  \"instagram.com\",\n  \"www.instagram.com\",\n  \"reddit.com\",\n  \"www.reddit.com\",\n  \"tiktok.com\",\n  \"www.tiktok.com\",\n]\n\n// List of sites that get content evaluation (Stage 2 behavior)\nconst CONTENT_EVALUATED_SITES = [\n  \"youtube.com\",\n  \"www.youtube.com\",\n  \"twitter.com\",\n  \"www.twitter.com\",\n  \"x.com\",\n  \"www.x.com\",\n]\n\n// Check if current site should be completely blocked\nfunction shouldCompletelyBlockSite() {\n  const currentDomain = window.location.hostname.toLowerCase()\n  return COMPLETELY_BLOCKED_SITES.some(\n    (blockedSite) => currentDomain === blockedSite || currentDomain.endsWith(\".\" + blockedSite),\n  )\n}\n\n// Check if current site should have content evaluated\nfunction shouldEvaluateContent() {\n  const currentDomain = window.location.hostname.toLowerCase()\n  return CONTENT_EVALUATED_SITES.some((site) => currentDomain === site || currentDomain.endsWith(\".\" + site))\n}\n\n// Check if we're on a specific content page (not homepage/search)\nfunction isOnSpecificContent() {\n  const hostname = window.location.hostname.toLowerCase()\n  const pathname = window.location.pathname\n  const search = window.location.search\n\n  if (hostname.includes(\"youtube.com\")) {\n    // Only evaluate if we're on a video page\n    return pathname === \"/watch\" && search.includes(\"v=\")\n  } else if (hostname.includes(\"twitter.com\") || hostname.includes(\"x.com\")) {\n    // Only evaluate if we're on a specific tweet\n    return pathname.includes(\"/status/\") || pathname.includes(\"/tweet/\")\n  }\n\n  return false\n}\n\n// Pause YouTube video\nfunction pauseYouTubeVideo() {\n  const hostname = window.location.hostname.toLowerCase()\n\n  if (hostname.includes(\"youtube.com\")) {\n    // Try multiple methods to pause the video\n\n    // Method 1: Find video element directly\n    const videoElement = document.querySelector(\"video\")\n    if (videoElement && !videoElement.paused) {\n      videoElement.pause()\n      console.log(\"Video paused using video element\")\n      return true\n    }\n\n    // Method 2: Try YouTube's player API\n    if (window.ytplayer && window.ytplayer.pauseVideo) {\n      window.ytplayer.pauseVideo()\n      console.log(\"Video paused using YouTube player API\")\n      return true\n    }\n\n    // Method 3: Try to click the pause button\n    const pauseButton = document.querySelector(\".ytp-play-button[aria-label*='Pause']\")\n    if (pauseButton) {\n      pauseButton.click()\n      console.log(\"Video paused by clicking pause button\")\n      return true\n    }\n\n    // Method 4: Try keyboard shortcut (spacebar)\n    const playerContainer = document.querySelector(\"#movie_player, .html5-video-player\")\n    if (playerContainer) {\n      const spaceEvent = new KeyboardEvent(\"keydown\", {\n        key: \" \",\n        code: \"Space\",\n        keyCode: 32,\n        which: 32,\n        bubbles: true,\n      })\n      playerContainer.dispatchEvent(spaceEvent)\n      console.log(\"Attempted to pause video with spacebar\")\n      return true\n    }\n  }\n\n  return false\n}\n\n// Extract content from different sites\nfunction extractPageContent() {\n  const hostname = window.location.hostname.toLowerCase()\n  let content = \"\"\n\n  if (hostname.includes(\"youtube.com\")) {\n    // Only extract if we're on a video page\n    if (!isOnSpecificContent()) {\n      return \"\"\n    }\n\n    // Try multiple selectors for YouTube video titles\n    const titleSelectors = [\n      \"h1.ytd-video-primary-info-renderer\",\n      \"h1.title.style-scope.ytd-video-primary-info-renderer\",\n      'h1[class*=\"title\"]',\n      \".title.style-scope.ytd-video-primary-info-renderer\",\n      \"h1.style-scope.ytd-video-primary-info-renderer\",\n      \"yt-formatted-string.style-scope.ytd-video-primary-info-renderer\",\n      \"#container h1\",\n      \".ytd-video-primary-info-renderer h1\",\n      // New selectors for updated YouTube layout\n      \"h1.ytd-watch-metadata\",\n      \"yt-formatted-string#title\",\n      \".ytd-watch-metadata h1\",\n    ]\n\n    for (const selector of titleSelectors) {\n      const titleElement = document.querySelector(selector)\n      if (titleElement && titleElement.textContent.trim()) {\n        content = titleElement.textContent.trim()\n        break\n      }\n    }\n\n    // Additional check for video description or channel info if title is generic\n    if (!content || content.length < 5) {\n      // Try to get more context from the page\n      const descriptionElement = document.querySelector(\"#description-text, .ytd-video-secondary-info-renderer\")\n      if (descriptionElement) {\n        const description = descriptionElement.textContent.trim().substring(0, 100)\n        if (description) {\n          content = `${content || \"Video\"}: ${description}`\n        }\n      }\n    }\n  } else if (hostname.includes(\"twitter.com\") || hostname.includes(\"x.com\")) {\n    // Only extract if we're on a specific tweet\n    if (!isOnSpecificContent()) {\n      return \"\"\n    }\n\n    // Extract tweet content\n    const tweetElement = document.querySelector('[data-testid=\"tweetText\"]')\n    if (tweetElement) {\n      content = tweetElement.textContent.trim()\n    }\n  }\n\n  console.log(\"Extracted content:\", content)\n  return content\n}\n\n// Format focus areas for display\nfunction formatFocusAreasForDisplay(focusAreas) {\n  if (!focusAreas || focusAreas.length === 0) {\n    return \"None set\"\n  }\n\n  return focusAreas.map((area) => `<span class=\"focus-tag\">${area}</span>`).join(\"\")\n}\n\n// Create motivational overlay\nfunction createMotivationalOverlay(content, focusAreas) {\n  // Remove any existing overlay\n  const existingOverlay = document.getElementById(\"focus-mode-overlay\")\n  if (existingOverlay) {\n    existingOverlay.remove()\n  }\n\n  // Pause video before showing overlay\n  const videoPaused = pauseYouTubeVideo()\n  if (videoPaused) {\n    console.log(\"Video paused before showing overlay\")\n  }\n\n  const focusAreasDisplay = formatFocusAreasForDisplay(focusAreas)\n\n  const overlay = document.createElement(\"div\")\n  overlay.id = \"focus-mode-overlay\"\n  overlay.innerHTML = `\n    <div class=\"focus-overlay-container\">\n      <div class=\"focus-overlay-content\">\n        <div class=\"focus-icon\">🎯</div>\n        <h1>Content Not Aligned with Your Focus</h1>\n        <div class=\"content-info\">\n          <p><strong>Your Focus Areas:</strong></p>\n          <div class=\"focus-areas-display\">${focusAreasDisplay}</div>\n          <p><strong>Current Content:</strong> \"${content}\"</p>\n        </div>\n        <div class=\"motivational-quote\">\n          <p>\"Success is the result of preparation, hard work, and learning from failure.\" - Colin Powell</p>\n        </div>\n        <div class=\"overlay-buttons\">\n          <button id=\"goBackBtn\" class=\"overlay-btn back-btn\">Take Me Back</button>\n          <button id=\"continueBtn\" class=\"overlay-btn continue-btn\" disabled>\n            Continue Anyway (<span id=\"countdown\">120</span>s)\n          </button>\n        </div>\n        <div class=\"justification-section\" id=\"justificationSection\" style=\"display: none;\">\n          <h3>Why do you need to view this content?</h3>\n          <textarea id=\"justificationText\" placeholder=\"Explain why this content is necessary for your current focus...\"></textarea>\n          <button id=\"submitJustification\" class=\"overlay-btn justify-btn\">Submit & Continue</button>\n        </div>\n      </div>\n    </div>\n  `\n\n  // Add styles\n  const style = document.createElement(\"style\")\n  style.textContent = `\n    #focus-mode-overlay {\n      position: fixed !important;\n      top: 0 !important;\n      left: 0 !important;\n      width: 100% !important;\n      height: 100% !important;\n      background: rgba(0, 0, 0, 0.95) !important;\n      z-index: 2147483647 !important;\n      display: flex !important;\n      justify-content: center !important;\n      align-items: center !important;\n      font-family: Arial, sans-serif !important;\n    }\n    \n    .focus-overlay-container {\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;\n      border-radius: 20px !important;\n      padding: 40px !important;\n      max-width: 600px !important;\n      text-align: center !important;\n      color: white !important;\n      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3) !important;\n    }\n    \n    .focus-icon {\n      font-size: 4em !important;\n      margin-bottom: 20px !important;\n    }\n    \n    .focus-overlay-content h1 {\n      font-size: 2.2em !important;\n      margin-bottom: 30px !important;\n      color: #fff !important;\n    }\n    \n    .content-info {\n      background: rgba(255, 255, 255, 0.1) !important;\n      padding: 20px !important;\n      border-radius: 10px !important;\n      margin-bottom: 30px !important;\n      text-align: left !important;\n    }\n    \n    .content-info p {\n      margin: 10px 0 !important;\n      font-size: 1.1em !important;\n    }\n    \n    .focus-areas-display {\n      margin: 10px 0 !important;\n      display: flex !important;\n      flex-wrap: wrap !important;\n      gap: 8px !important;\n    }\n    \n    .focus-tag {\n      display: inline-block !important;\n      background-color: rgba(255, 255, 255, 0.2) !important;\n      color: #fff !important;\n      padding: 4px 12px !important;\n      border-radius: 15px !important;\n      font-size: 0.9em !important;\n      border: 1px solid rgba(255, 255, 255, 0.3) !important;\n    }\n    \n    .motivational-quote {\n      font-style: italic !important;\n      margin: 30px 0 !important;\n      padding: 20px !important;\n      background: rgba(255, 255, 255, 0.1) !important;\n      border-radius: 10px !important;\n      border-left: 4px solid #ffeb3b !important;\n    }\n    \n    .overlay-buttons {\n      display: flex !important;\n      gap: 20px !important;\n      justify-content: center !important;\n      margin-top: 30px !important;\n    }\n    \n    .overlay-btn {\n      padding: 15px 30px !important;\n      border: none !important;\n      border-radius: 25px !important;\n      font-size: 1.1em !important;\n      cursor: pointer !important;\n      transition: all 0.3s ease !important;\n      font-weight: bold !important;\n    }\n    \n    .back-btn {\n      background: #4caf50 !important;\n      color: white !important;\n    }\n    \n    .back-btn:hover {\n      background: #45a049 !important;\n      transform: translateY(-2px) !important;\n    }\n    \n    .continue-btn {\n      background: #ff6b6b !important;\n      color: white !important;\n    }\n    \n    .continue-btn:disabled {\n      background: #ccc !important;\n      cursor: not-allowed !important;\n    }\n    \n    .continue-btn:not(:disabled):hover {\n      background: #ff5252 !important;\n      transform: translateY(-2px) !important;\n    }\n    \n    .justification-section {\n      margin-top: 30px !important;\n      text-align: left !important;\n    }\n    \n    .justification-section h3 {\n      margin-bottom: 15px !important;\n      text-align: center !important;\n    }\n    \n    .justification-section textarea {\n      width: 100% !important;\n      height: 100px !important;\n      padding: 15px !important;\n      border: none !important;\n      border-radius: 10px !important;\n      font-size: 1em !important;\n      resize: vertical !important;\n      margin-bottom: 15px !important;\n      box-sizing: border-box !important;\n    }\n    \n    .justify-btn {\n      background: #ff9800 !important;\n      color: white !important;\n      width: 100% !important;\n    }\n    \n    .justify-btn:hover {\n      background: #f57c00 !important;\n    }\n  `\n\n  document.head.appendChild(style)\n  document.body.appendChild(overlay)\n\n  // Handle button clicks\n  const goBackBtn = document.getElementById(\"goBackBtn\")\n  const continueBtn = document.getElementById(\"continueBtn\")\n  const justificationSection = document.getElementById(\"justificationSection\")\n  const submitJustificationBtn = document.getElementById(\"submitJustification\")\n  const countdownSpan = document.getElementById(\"countdown\")\n\n  goBackBtn.addEventListener(\"click\", () => {\n    window.history.back()\n  })\n\n  // Countdown timer for continue button\n  let countdown = 120 // 2 minutes\n  const countdownInterval = setInterval(() => {\n    countdown--\n    countdownSpan.textContent = countdown\n\n    if (countdown <= 0) {\n      clearInterval(countdownInterval)\n      continueBtn.disabled = false\n      continueBtn.innerHTML = \"Continue Anyway\"\n    }\n  }, 1000)\n\n  continueBtn.addEventListener(\"click\", () => {\n    if (!continueBtn.disabled) {\n      justificationSection.style.display = \"block\"\n      continueBtn.style.display = \"none\"\n    }\n  })\n\n  submitJustificationBtn.addEventListener(\"click\", () => {\n    const justification = document.getElementById(\"justificationText\").value.trim()\n    if (justification.length < 20) {\n      alert(\"Please provide a more detailed justification (at least 20 characters)\")\n      return\n    }\n\n    // Log the justification for analytics\n    console.log(\"User justification:\", justification)\n\n    // Remove overlay and allow access\n    overlay.remove()\n  })\n}\n\n// Show complete block message (Stage 1 behavior)\nfunction showCompleteBlockMessage() {\n  document.documentElement.innerHTML = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Site Blocked - Focus Mode</title>\n      <style>\n        body {\n          font-family: Arial, sans-serif;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          min-height: 100vh;\n          margin: 0;\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          color: white;\n        }\n        .container {\n          text-align: center;\n          padding: 40px;\n          background: rgba(255, 255, 255, 0.1);\n          border-radius: 15px;\n          backdrop-filter: blur(10px);\n          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n          max-width: 500px;\n        }\n        h1 {\n          font-size: 2.5em;\n          margin-bottom: 20px;\n          color: #fff;\n        }\n        .icon {\n          font-size: 4em;\n          margin-bottom: 20px;\n        }\n        p {\n          font-size: 1.2em;\n          line-height: 1.6;\n          margin-bottom: 30px;\n          opacity: 0.9;\n        }\n        .site-name {\n          font-weight: bold;\n          color: #ffeb3b;\n        }\n        .motivational {\n          font-style: italic;\n          margin-top: 20px;\n          padding: 20px;\n          background: rgba(255, 255, 255, 0.1);\n          border-radius: 10px;\n          border-left: 4px solid #ffeb3b;\n        }\n        button {\n          background: #ff6b6b;\n          color: white;\n          border: none;\n          padding: 12px 30px;\n          font-size: 1.1em;\n          border-radius: 25px;\n          cursor: pointer;\n          transition: all 0.3s ease;\n          margin: 10px;\n        }\n        button:hover {\n          background: #ff5252;\n          transform: translateY(-2px);\n          box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);\n        }\n        .turn-off-btn {\n          background: #4caf50;\n        }\n        .turn-off-btn:hover {\n          background: #45a049;\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"icon\">🚫</div>\n        <h1>Site Completely Blocked</h1>\n        <p>\n          <span class=\"site-name\">${window.location.hostname}</span> is completely blocked while Focus Mode is on.\n        </p>\n        <p>This site is known to be highly distracting and doesn't support content evaluation.</p>\n        \n        <div class=\"motivational\">\n          \"The successful warrior is the average person with laser-like focus.\" - Bruce Lee\n        </div>\n        \n        <div style=\"margin-top: 30px;\">\n          <button onclick=\"history.back()\" class=\"turn-off-btn\">Go Back</button>\n          <button onclick=\"window.close()\">Close Tab</button>\n        </div>\n      </div>\n    </body>\n    </html>\n  `\n}\n\n// Main function to check and handle focus mode\nasync function handleFocusMode() {\n  try {\n    console.log(\"Handling focus mode for:\", window.location.href)\n\n    // Get focus mode state and focus areas\n    const result = await window.chrome.storage.local.get([\"focusMode\", \"focusAreas\"])\n    const focusMode = result.focusMode || false\n    const focusAreas = result.focusAreas || []\n\n    console.log(\"Focus mode:\", focusMode, \"Focus areas:\", focusAreas)\n\n    if (!focusMode) {\n      return // Focus mode is off, do nothing\n    }\n\n    // Check if site should be completely blocked\n    if (shouldCompletelyBlockSite()) {\n      console.log(\"Site should be completely blocked\")\n      showCompleteBlockMessage()\n      return\n    }\n\n    // Check if site should have content evaluated AND we're on specific content\n    if (shouldEvaluateContent() && isOnSpecificContent()) {\n      console.log(\"Site should have content evaluated and we're on specific content\")\n\n      // Wait a bit for page content to load\n      setTimeout(async () => {\n        const content = extractPageContent()\n        console.log(\"Extracted content:\", content)\n\n        // Only proceed if we have meaningful content and focus areas\n        if (content && content.length > 5 && focusAreas.length > 0) {\n          try {\n            // Send content to background script for evaluation\n            const response = await window.chrome.runtime.sendMessage({\n              action: \"evaluateContent\",\n              content: content,\n              focusAreas: focusAreas,\n            })\n\n            console.log(\"Evaluation response:\", response)\n\n            if (response && !response.isRelevant) {\n              console.log(\"Content is not relevant, showing overlay\")\n              createMotivationalOverlay(content, focusAreas)\n            } else {\n              console.log(\"Content is relevant, allowing access\")\n            }\n          } catch (error) {\n            console.error(\"Error sending message to background:\", error)\n          }\n        } else {\n          console.log(\"No meaningful content found or no focus areas set\")\n        }\n      }, 3000) // Wait 3 seconds for content to load\n    } else {\n      console.log(\"Not evaluating content - either not a monitored site or not on specific content\")\n    }\n  } catch (error) {\n    console.error(\"Error handling focus mode:\", error)\n  }\n}\n\n// Run when page loads\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", handleFocusMode)\n} else {\n  handleFocusMode()\n}\n\n// Also run when navigating within single-page applications\nlet lastUrl = location.href\nnew MutationObserver(() => {\n  const url = location.href\n  if (url !== lastUrl) {\n    lastUrl = url\n    console.log(\"URL changed to:\", url)\n    setTimeout(handleFocusMode, 2000) // Wait for new content to load\n  }\n}).observe(document, { subtree: true, childList: true })\n\n// Listen for storage changes\nwindow.chrome.storage.onChanged.addListener((changes, namespace) => {\n  if (namespace === \"local\" && (changes.focusMode || changes.focusAreas)) {\n    console.log(\"Storage changed, re-evaluating\")\n    handleFocusMode()\n  }\n})\n"],"names":["COMPLETELY_BLOCKED_SITES","CONTENT_EVALUATED_SITES","isOnSpecificContent","hostname","window","location","toLowerCase","pathname","search","includes","async","handleFocusMode","console","log","href","result","chrome","storage","local","get","focusMode","focusAreas","currentDomain","some","blockedSite","endsWith","shouldCompletelyBlockSite","document","documentElement","innerHTML","site","shouldEvaluateContent","setTimeout","content","titleSelectors","selector","titleElement","querySelector","textContent","trim","length","descriptionElement","description","substring","tweetElement","extractPageContent","response","runtime","sendMessage","action","isRelevant","existingOverlay","getElementById","remove","videoElement","paused","pause","ytplayer","pauseVideo","pauseButton","click","playerContainer","spaceEvent","KeyboardEvent","key","code","keyCode","which","bubbles","dispatchEvent","pauseYouTubeVideo","focusAreasDisplay","map","area","join","formatFocusAreasForDisplay","overlay","createElement","id","style","head","appendChild","body","goBackBtn","continueBtn","justificationSection","submitJustificationBtn","countdownSpan","addEventListener","history","back","countdown","countdownInterval","setInterval","clearInterval","disabled","display","justification","value","alert","createMotivationalOverlay","error","readyState","lastUrl","MutationObserver","url","observe","subtree","childList","onChanged","addListener","changes","namespace"],"sourceRoot":""}