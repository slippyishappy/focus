{"version":3,"file":"content.bundle.js","mappings":"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","sources":["webpack://focus/./src/content.js"],"sourcesContent":["// Function to safely add CSS link\nfunction addStylesheet() {\n  if (document.head) {\n    const blockedPageStylesLink = document.createElement(\"link\")\n    blockedPageStylesLink.rel = \"stylesheet\"\n    blockedPageStylesLink.href = window.chrome.runtime.getURL(\"blocked-page.css\")\n    document.head.appendChild(blockedPageStylesLink)\n  } else {\n    // If document.head is not available yet, wait for it\n    setTimeout(addStylesheet, 10)\n  }\n}\n\n// Add stylesheet when DOM is ready\naddStylesheet()\n\n// List of sites that get completely blocked (Stage 1 behavior)\nconst COMPLETELY_BLOCKED_SITES = [\n  \"facebook.com\",\n  \"www.facebook.com\",\n  \"instagram.com\",\n  \"www.instagram.com\",\n  \"reddit.com\",\n  \"www.reddit.com\",\n  \"tiktok.com\",\n  \"www.tiktok.com\",\n]\n\n// List of sites that get content evaluation (Stage 2 behavior)\nconst CONTENT_EVALUATED_SITES = [\n  \"youtube.com\",\n  \"www.youtube.com\",\n  \"twitter.com\",\n  \"www.twitter.com\",\n  \"x.com\",\n  \"www.x.com\",\n]\n\n// Check if current site should be completely blocked\nfunction shouldCompletelyBlockSite() {\n  const currentDomain = window.location.hostname.toLowerCase()\n  return COMPLETELY_BLOCKED_SITES.some(\n    (blockedSite) => currentDomain === blockedSite || currentDomain.endsWith(\".\" + blockedSite),\n  )\n}\n\n// Check if current site should have content evaluated\nfunction shouldEvaluateContent() {\n  const currentDomain = window.location.hostname.toLowerCase()\n  return CONTENT_EVALUATED_SITES.some((site) => currentDomain === site || currentDomain.endsWith(\".\" + site))\n}\n\n// Check if we're on a specific content page (not homepage/search)\nfunction isOnSpecificContent() {\n  const hostname = window.location.hostname.toLowerCase()\n  const pathname = window.location.pathname\n  const search = window.location.search\n\n  if (hostname.includes(\"youtube.com\")) {\n    // Only evaluate if we're on a video page\n    return pathname === \"/watch\" && search.includes(\"v=\")\n  } else if (hostname.includes(\"twitter.com\") || hostname.includes(\"x.com\")) {\n    // Only evaluate if we're on a specific tweet\n    return pathname.includes(\"/status/\") || pathname.includes(\"/tweet/\")\n  }\n\n  return false\n}\n\n// Pause YouTube video\nfunction pauseYouTubeVideo() {\n  const hostname = window.location.hostname.toLowerCase()\n\n  if (hostname.includes(\"youtube.com\")) {\n    try {\n      // Try multiple methods to pause the video\n\n      // Method 1: Find video element directly\n      const videoElement = document.querySelector(\"video\")\n      if (videoElement && !videoElement.paused) {\n        videoElement.pause()\n        console.log(\"Video paused using video element\")\n        return true\n      }\n\n      // Method 2: Try YouTube's player API\n      if (window.ytplayer && window.ytplayer.pauseVideo) {\n        window.ytplayer.pauseVideo()\n        console.log(\"Video paused using YouTube player API\")\n        return true\n      }\n\n      // Method 3: Try to click the pause button\n      const pauseButton = document.querySelector(\".ytp-play-button[aria-label*='Pause']\")\n      if (pauseButton) {\n        pauseButton.click()\n        console.log(\"Video paused by clicking pause button\")\n        return true\n      }\n\n      // Method 4: Try keyboard shortcut (spacebar)\n      const playerContainer = document.querySelector(\"#movie_player, .html5-video-player\")\n      if (playerContainer) {\n        const spaceEvent = new KeyboardEvent(\"keydown\", {\n          key: \" \",\n          code: \"Space\",\n          keyCode: 32,\n          which: 32,\n          bubbles: true,\n        })\n        playerContainer.dispatchEvent(spaceEvent)\n        console.log(\"Attempted to pause video with spacebar\")\n        return true\n      }\n    } catch (error) {\n      console.error(\"Error pausing video:\", error)\n      // Don't throw the error, just return false\n      return false\n    }\n  }\n\n  return false\n}\n\n// Extract content from different sites\nfunction extractPageContent() {\n  const hostname = window.location.hostname.toLowerCase()\n  let content = \"\"\n\n  if (hostname.includes(\"youtube.com\")) {\n    // Only extract if we're on a video page\n    if (!isOnSpecificContent()) {\n      return \"\"\n    }\n\n    // Try multiple selectors for YouTube video titles\n    const titleSelectors = [\n      \"h1.ytd-video-primary-info-renderer\",\n      \"h1.title.style-scope.ytd-video-primary-info-renderer\",\n      'h1[class*=\"title\"]',\n      \".title.style-scope.ytd-video-primary-info-renderer\",\n      \"h1.style-scope.ytd-video-primary-info-renderer\",\n      \"yt-formatted-string.style-scope.ytd-video-primary-info-renderer\",\n      \"#container h1\",\n      \".ytd-video-primary-info-renderer h1\",\n      // New selectors for updated YouTube layout\n      \"h1.ytd-watch-metadata\",\n      \"yt-formatted-string#title\",\n      \".ytd-watch-metadata h1\",\n    ]\n\n    for (const selector of titleSelectors) {\n      const titleElement = document.querySelector(selector)\n      if (titleElement && titleElement.textContent.trim()) {\n        content = titleElement.textContent.trim()\n        break\n      }\n    }\n\n    // Additional check for video description or channel info if title is generic\n    if (!content || content.length < 5) {\n      // Try to get more context from the page\n      const descriptionElement = document.querySelector(\"#description-text, .ytd-video-secondary-info-renderer\")\n      if (descriptionElement) {\n        const description = descriptionElement.textContent.trim().substring(0, 100)\n        if (description) {\n          content = `${content || \"Video\"}: ${description}`\n        }\n      }\n    }\n  } else if (hostname.includes(\"twitter.com\") || hostname.includes(\"x.com\")) {\n    // Only extract if we're on a specific tweet\n    if (!isOnSpecificContent()) {\n      return \"\"\n    }\n\n    // Extract tweet content\n    const tweetElement = document.querySelector('[data-testid=\"tweetText\"]')\n    if (tweetElement) {\n      content = tweetElement.textContent.trim()\n    }\n  }\n\n  console.log(\"Extracted content:\", content)\n  return content\n}\n\n// Format focus areas for display\nfunction formatFocusAreasForDisplay(focusAreas) {\n  if (!focusAreas || focusAreas.length === 0) {\n    return `<span style=\"padding: 0.375rem 0.75rem; background: #f3f4f6; color: #6b7280; font-size: 0.875rem; border-radius: 9999px;\">None set</span>`\n  }\n\n  return focusAreas.map((area) => `<span style=\"padding: 0.375rem 0.75rem; background: #dbeafe; color: #1e40af; font-size: 0.875rem; font-weight: 500; border-radius: 9999px;\">${area}</span>`).join(\" \")\n}\n\n// Create motivational overlay\nfunction createMotivationalOverlay(content, focusAreas) {\n  try {\n    // Wait for DOM to be ready before creating overlay\n    if (!document.body || !document.head) {\n      setTimeout(() => createMotivationalOverlay(content, focusAreas), 100)\n      return\n    }\n\n    // Remove any existing overlay\n    const existingOverlay = document.getElementById(\"focus-mode-overlay\")\n    if (existingOverlay) {\n      existingOverlay.remove()\n    }\n\n    // Pause video BEFORE creating overlay to avoid conflicts\n    const videoPaused = pauseYouTubeVideo()\n    if (videoPaused) {\n      console.log(\"Video paused before showing overlay\")\n    }\n\n    // Small delay to let YouTube's observers settle\n    setTimeout(() => {\n      createOverlayDOM(content, focusAreas)\n    }, 250)\n    \n  } catch (error) {\n    console.error(\"Error creating motivational overlay:\", error)\n    // Try again with a longer delay\n    setTimeout(() => createMotivationalOverlay(content, focusAreas), 1000)\n  }\n}\n\n// Separate function to create the actual overlay DOM\nfunction createOverlayDOM(content, focusAreas) {\n  try {\n    const focusAreasDisplay = formatFocusAreasForDisplay(focusAreas)\n\n  const overlay = document.createElement(\"div\")\n  overlay.id = \"focus-mode-overlay\"\n  overlay.style.cssText = `\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 2147483647;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  `\n  overlay.innerHTML = `\n    <div style=\"\n      background: white;\n      border-radius: 12px;\n      border: 1px solid #f3f4f6;\n      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n      max-width: 40rem;\n      margin: 0 1.5rem;\n      width: 100%;\n      max-height: 90vh;\n      overflow-y: auto;\n    \">\n      <div style=\"padding: 2rem; text-align: center;\">\n        <!-- Icon and Header -->\n        <div style=\"\n          width: 4rem;\n          height: 4rem;\n          background: linear-gradient(135deg, #3b82f6, #8b5cf6);\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin: 0 auto 1.5rem auto;\n        \">\n          <svg style=\"width: 2rem; height: 2rem; color: white;\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z\" clip-rule=\"evenodd\"></path>\n          </svg>\n        </div>\n        \n        <h1 style=\"font-size: 1.5rem; font-weight: 600; color: #111827; margin-bottom: 1.5rem;\">Content Not Aligned with Your Focus</h1>\n        \n        <!-- Content Info -->\n        <div style=\"\n          background: #f9fafb;\n          border: 1px solid #f3f4f6;\n          border-radius: 12px;\n          padding: 1.5rem;\n          margin-bottom: 1.5rem;\n          text-align: left;\n        \">\n          <div style=\"margin-bottom: 1rem;\">\n            <p style=\"font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.5rem;\">Your Focus Areas:</p>\n            <div style=\"display: flex; flex-wrap: wrap; gap: 0.5rem;\">${focusAreasDisplay}</div>\n          </div>\n          <div>\n            <p style=\"font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.25rem;\">Current Content:</p>\n            <p style=\"font-size: 0.875rem; color: #4b5563;\">\"${content}\"</p>\n          </div>\n        </div>\n        \n        <!-- Motivational Quote -->\n        <div style=\"\n          background: #eff6ff;\n          border: 1px solid #dbeafe;\n          border-radius: 12px;\n          padding: 1rem;\n          margin-bottom: 1.5rem;\n        \">\n          <p style=\"font-size: 0.875rem; font-style: italic; color: #1e3a8a;\">\"Success is the result of preparation, hard work, and learning from failure.\" - Colin Powell</p>\n        </div>\n        \n        <!-- Action Buttons -->\n        <div style=\"display: flex; gap: 0.75rem; justify-content: center; margin-bottom: 1.5rem;\">\n          <button id=\"goBackBtn\" style=\"\n            padding: 0.625rem 1.5rem;\n            background: #111827;\n            color: white;\n            font-size: 0.875rem;\n            font-weight: 500;\n            border-radius: 12px;\n            border: none;\n            cursor: pointer;\n            transition: background-color 0.2s;\n          \">\n            Take Me Back\n          </button>\n          <button id=\"continueBtn\" style=\"\n            padding: 0.625rem 1.5rem;\n            background: #e5e7eb;\n            color: #374151;\n            font-size: 0.875rem;\n            font-weight: 500;\n            border-radius: 12px;\n            border: none;\n            cursor: not-allowed;\n            opacity: 0.5;\n            transition: all 0.2s;\n          \" disabled>\n            Continue Anyway (<span id=\"countdown\">120</span>s)\n          </button>\n        </div>\n        \n        <!-- Justification Section -->\n        <div id=\"justificationSection\" style=\"display: none;\">\n          <div style=\"border-top: 1px solid #f3f4f6; padding-top: 1.5rem;\">\n            <h3 style=\"font-size: 1.125rem; font-weight: 500; color: #111827; margin-bottom: 1rem;\">Why do you need to view this content?</h3>\n            <textarea id=\"justificationText\" placeholder=\"Explain why this content is necessary for your current focus...\" style=\"\n              width: 100%;\n              height: 6rem;\n              padding: 0.75rem;\n              font-size: 0.875rem;\n              border: 1px solid #d1d5db;\n              border-radius: 12px;\n              resize: none;\n              margin-bottom: 1rem;\n              box-sizing: border-box;\n            \"></textarea>\n            <button id=\"submitJustification\" style=\"\n              width: 100%;\n              padding: 0.625rem 1.5rem;\n              background: #2563eb;\n              color: white;\n              font-size: 0.875rem;\n              font-weight: 500;\n              border-radius: 12px;\n              border: none;\n              cursor: pointer;\n              transition: background-color 0.2s;\n            \">\n              Submit & Continue\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n\n  // Safely append overlay to DOM\n  if (document.body) {\n    document.body.appendChild(overlay)\n  } else {\n    // If body doesn't exist yet, append to document.documentElement\n    document.documentElement.appendChild(overlay)\n  }\n\n  // Handle button clicks\n  const goBackBtn = document.getElementById(\"goBackBtn\")\n  const continueBtn = document.getElementById(\"continueBtn\")\n  const justificationSection = document.getElementById(\"justificationSection\")\n  const submitJustificationBtn = document.getElementById(\"submitJustification\")\n  const countdownSpan = document.getElementById(\"countdown\")\n\n  goBackBtn.addEventListener(\"click\", () => {\n    window.history.back()\n  })\n\n  // Countdown timer for continue button\n  let countdown = 120 // 2 minutes\n  const countdownInterval = setInterval(() => {\n    countdown--\n    countdownSpan.textContent = countdown\n\n    if (countdown <= 0) {\n      clearInterval(countdownInterval)\n      continueBtn.disabled = false\n      continueBtn.innerHTML = \"Continue Anyway\"\n    }\n  }, 1000)\n\n  continueBtn.addEventListener(\"click\", () => {\n    if (!continueBtn.disabled) {\n      justificationSection.style.display = \"block\"\n      continueBtn.style.display = \"none\"\n    }\n  })\n\n  submitJustificationBtn.addEventListener(\"click\", () => {\n    const justification = document.getElementById(\"justificationText\").value.trim()\n    if (justification.length < 20) {\n      alert(\"Please provide a more detailed justification (at least 20 characters)\")\n      return\n    }\n\n    // Log the justification for analytics\n    console.log(\"User justification:\", justification)\n\n    // Remove overlay and allow access\n    overlay.remove()\n  })\n  } catch (error) {\n    console.error(\"Error creating overlay DOM:\", error)\n    // If there's an error, try to create a simpler overlay\n    createSimpleOverlay(content, focusAreas)\n  }\n}\n\n// Simple fallback overlay function\nfunction createSimpleOverlay(content, focusAreas) {\n  try {\n    const overlay = document.createElement(\"div\")\n    overlay.id = \"focus-mode-overlay\"\n    overlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.8);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 2147483647;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    `\n    \n    overlay.innerHTML = `\n      <div style=\"\n        background: white;\n        padding: 40px;\n        border-radius: 12px;\n        text-align: center;\n        max-width: 500px;\n        margin: 20px;\n      \">\n        <h2 style=\"margin: 0 0 20px 0; color: #333;\">Content Not Aligned with Your Focus</h2>\n        <p style=\"margin: 0 0 20px 0; color: #666;\">This content doesn't match your current focus areas.</p>\n        <button id=\"simple-go-back\" style=\"\n          background: #333;\n          color: white;\n          border: none;\n          padding: 12px 24px;\n          border-radius: 6px;\n          cursor: pointer;\n          margin-right: 10px;\n        \">Go Back</button>\n        <button id=\"simple-continue\" style=\"\n          background: #ccc;\n          color: #333;\n          border: none;\n          padding: 12px 24px;\n          border-radius: 6px;\n          cursor: pointer;\n        \">Continue Anyway</button>\n      </div>\n    `\n    \n    document.body.appendChild(overlay)\n    \n    document.getElementById(\"simple-go-back\").addEventListener(\"click\", () => {\n      window.history.back()\n    })\n    \n    document.getElementById(\"simple-continue\").addEventListener(\"click\", () => {\n      overlay.remove()\n    })\n    \n  } catch (error) {\n    console.error(\"Error creating simple overlay:\", error)\n  }\n}\n\n// Show complete block message (Stage 1 behavior)\nfunction showCompleteBlockMessage() {\n  // Wait for DOM to be ready before replacing content\n  if (!document.documentElement) {\n    setTimeout(showCompleteBlockMessage, 100)\n    return\n  }\n\n  // Clear existing content and set up the page structure\n  document.head.innerHTML = `\n    <title>Site Blocked - Focus Mode</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  `\n  \n  // Create and inject CSS link\n  const cssLink = document.createElement('link')\n  cssLink.rel = 'stylesheet'\n  cssLink.href = window.chrome.runtime.getURL('blocked-page.css')\n  document.head.appendChild(cssLink)\n  \n  // Set up the body with proper classes and content\n  document.body.className = 'blocked-page-body'\n  document.body.innerHTML = `\n    <div class=\"blocked-page-container\">\n      <!-- Icon -->\n      <div class=\"blocked-page-icon blocked-page-icon-red\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\"><rect width=\"256\" height=\"256\" fill=\"none\"/><path d=\"M128,60a20,20,0,0,1,40,0v56\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"/><path d=\"M88,76V44a20,20,0,0,1,40,0v68\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"/><path d=\"M128,176a40,40,0,0,1,40-40V116a20,20,0,0,1,40,0v36a80,80,0,0,1-160,0V76a20,20,0,0,1,40,0v44\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"16\"/></svg>l\n      </div>\n      \n      <!-- Header -->\n      <h1 class=\"blocked-page-title\">Site Completely Blocked</h1>\n      \n      <!-- Content -->\n      <p class=\"blocked-page-description\">\n        <span class=\"blocked-page-domain\">${window.location.hostname}</span> is completely blocked while Focus Mode is active.\n      </p>\n      <p class=\"blocked-page-subtitle\">This site is known to be highly distracting and doesn't support content evaluation.</p>\n      \n      <!-- Motivational Quote -->\n      <div class=\"blocked-page-quote\">\n        <p class=\"blocked-page-quote-text\">\"The successful warrior is the average person with laser-like focus.\" - Bruce Lee</p>\n      </div>\n      \n      <!-- Action Buttons -->\n      <div class=\"blocked-page-buttons\">\n        <button id=\"closeTabBtn\" class=\"blocked-page-btn blocked-page-btn-primary\">\n          Close Tab\n        </button>\n      </div>\n    </div>\n  `\n  \n  // Add event listener for close tab button\n  setTimeout(() => {\n    const closeTabBtn = document.getElementById('closeTabBtn')\n    if (closeTabBtn) {\n      closeTabBtn.addEventListener('click', () => {\n        // Try multiple methods to close the tab\n        try {\n          // Method 1: Try window.close() first\n          window.close()\n          \n          // Method 2: If that doesn't work, send message to background script\n          setTimeout(() => {\n            if (window.chrome && window.chrome.runtime) {\n              window.chrome.runtime.sendMessage({\n                action: 'closeTab'\n              }).catch(() => {\n                // Method 3: If all else fails, navigate to about:blank\n                window.location.href = 'about:blank'\n              })\n            } else {\n              // Fallback: navigate to about:blank\n              window.location.href = 'about:blank'\n            }\n          }, 100)\n        } catch (error) {\n          console.error('Error closing tab:', error)\n          // Final fallback\n          window.location.href = 'about:blank'\n        }\n      })\n    }\n  }, 100)\n}\n\n// Get site toggle state for current domain\nfunction getSiteToggleState(domain, siteToggles) {\n  // Check for exact domain match or www variant\n  const possibleDomains = [\n    domain,\n    domain.startsWith('www.') ? domain.substring(4) : `www.${domain}`,\n  ]\n  \n  for (const possibleDomain of possibleDomains) {\n    if (siteToggles.hasOwnProperty(possibleDomain)) {\n      return siteToggles[possibleDomain]\n    }\n  }\n  \n  // Return default state based on site type\n  if (COMPLETELY_BLOCKED_SITES.includes(domain) || \n      COMPLETELY_BLOCKED_SITES.includes(`www.${domain}`) ||\n      COMPLETELY_BLOCKED_SITES.includes(domain.replace('www.', ''))) {\n    return 'blocked'\n  }\n  \n  if (CONTENT_EVALUATED_SITES.includes(domain) || \n      CONTENT_EVALUATED_SITES.includes(`www.${domain}`) ||\n      CONTENT_EVALUATED_SITES.includes(domain.replace('www.', ''))) {\n    return 'smart'\n  }\n  \n  return 'allowed'\n}\n\n// Main function to check and handle focus mode\nasync function handleFocusMode() {\n  try {\n    // Ensure DOM is ready before proceeding\n    if (!document.body || !document.head) {\n      setTimeout(handleFocusMode, 100)\n      return\n    }\n    \n    console.log(\"Handling focus mode for:\", window.location.href)\n\n    // Get focus mode state, focus areas, and site toggles\n    const result = await window.chrome.storage.local.get([\"focusMode\", \"focusAreas\", \"siteToggles\"])\n    const focusMode = result.focusMode || false\n    const focusAreas = result.focusAreas || []\n    const siteToggles = result.siteToggles || {}\n\n    console.log(\"Focus mode:\", focusMode, \"Focus areas:\", focusAreas, \"Site toggles:\", siteToggles)\n\n    if (!focusMode) {\n      return // Focus mode is off, do nothing\n    }\n\n    // Get current domain and its toggle state\n    const currentDomain = window.location.hostname.toLowerCase()\n    const siteToggleState = getSiteToggleState(currentDomain, siteToggles)\n    \n    console.log(\"Current domain:\", currentDomain, \"Toggle state:\", siteToggleState)\n\n    // If site is set to 'allowed', don't block or evaluate\n    if (siteToggleState === 'allowed') {\n      console.log(\"Site is set to allowed, skipping blocking/evaluation\")\n      return\n    }\n\n    // If site is set to 'blocked' or should be completely blocked by default\n    if (siteToggleState === 'blocked' || shouldCompletelyBlockSite()) {\n      console.log(\"Site should be completely blocked\")\n      showCompleteBlockMessage()\n      return\n    }\n\n    // If site is set to 'smart' or should have content evaluated by default\n    if ((siteToggleState === 'smart' || shouldEvaluateContent()) && isOnSpecificContent()) {\n      console.log(\"Site should have content evaluated and we're on specific content\")\n\n      // Wait a bit for page content to load\n      setTimeout(async () => {\n        const content = extractPageContent()\n        console.log(\"Extracted content:\", content)\n\n        // Only proceed if we have meaningful content and focus areas\n        if (content && content.length > 5 && focusAreas.length > 0) {\n          try {\n            // Send content to background script for evaluation\n            const response = await window.chrome.runtime.sendMessage({\n              action: \"evaluateContent\",\n              content: content,\n              focusAreas: focusAreas,\n            })\n\n            console.log(\"Evaluation response:\", response)\n\n            if (response && !response.isRelevant) {\n              console.log(\"Content is not relevant, showing overlay\")\n              createMotivationalOverlay(content, focusAreas)\n            } else {\n              console.log(\"Content is relevant, allowing access\")\n            }\n          } catch (error) {\n            console.error(\"Error sending message to background:\", error)\n          }\n        } else {\n          console.log(\"No meaningful content found or no focus areas set\")\n        }\n      }, 3000) // Wait 3 seconds for content to load\n    } else {\n      console.log(\"Not evaluating content - either not a monitored site or not on specific content\")\n    }\n  } catch (error) {\n    console.error(\"Error handling focus mode:\", error)\n  }\n}\n\n// Run when page loads\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", handleFocusMode)\n} else {\n  handleFocusMode()\n}\n\n// Also run when navigating within single-page applications\nlet lastUrl = location.href\nnew MutationObserver(() => {\n  const url = location.href\n  if (url !== lastUrl) {\n    lastUrl = url\n    console.log(\"URL changed to:\", url)\n    setTimeout(handleFocusMode, 2000) // Wait for new content to load\n  }\n}).observe(document, { subtree: true, childList: true })\n\n// Listen for storage changes\nwindow.chrome.storage.onChanged.addListener((changes, namespace) => {\n  if (namespace === \"local\" && (changes.focusMode || changes.focusAreas)) {\n    console.log(\"Storage changed, re-evaluating\")\n    handleFocusMode()\n  }\n})\n\n"],"names":["addStylesheet","document","head","blockedPageStylesLink","createElement","rel","href","window","chrome","runtime","getURL","appendChild","setTimeout","COMPLETELY_BLOCKED_SITES","CONTENT_EVALUATED_SITES","isOnSpecificContent","hostname","location","toLowerCase","pathname","search","includes","createMotivationalOverlay","content","focusAreas","body","existingOverlay","getElementById","remove","videoElement","querySelector","paused","pause","console","log","ytplayer","pauseVideo","pauseButton","click","playerContainer","spaceEvent","KeyboardEvent","key","code","keyCode","which","bubbles","dispatchEvent","error","pauseYouTubeVideo","focusAreasDisplay","length","map","area","join","formatFocusAreasForDisplay","overlay","id","style","cssText","innerHTML","documentElement","goBackBtn","continueBtn","justificationSection","submitJustificationBtn","countdownSpan","addEventListener","history","back","countdown","countdownInterval","setInterval","textContent","clearInterval","disabled","display","justification","value","trim","alert","createSimpleOverlay","createOverlayDOM","showCompleteBlockMessage","cssLink","className","closeTabBtn","close","sendMessage","action","catch","async","handleFocusMode","result","storage","local","get","focusMode","siteToggles","currentDomain","siteToggleState","domain","possibleDomains","startsWith","substring","possibleDomain","hasOwnProperty","replace","getSiteToggleState","some","blockedSite","endsWith","shouldCompletelyBlockSite","site","shouldEvaluateContent","titleSelectors","selector","titleElement","descriptionElement","description","tweetElement","extractPageContent","response","isRelevant","readyState","lastUrl","MutationObserver","url","observe","subtree","childList","onChanged","addListener","changes","namespace"],"sourceRoot":""}