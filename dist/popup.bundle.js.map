{"version":3,"file":"popup.bundle.js","mappings":"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","sources":["webpack://focus/./src/popup.js"],"sourcesContent":["import \"./popup.css\"\n\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\n  const statusDiv = document.getElementById(\"status\")\n  const toggleBtn = document.getElementById(\"toggleBtn\")\n  const focusAreaInput = document.getElementById(\"focusAreaInput\")\n  const addFocusBtn = document.getElementById(\"addFocusBtn\")\n  const focusAreasList = document.getElementById(\"focusAreasList\")\n  const emptyState = document.getElementById(\"emptyState\")\n  const siteTogglesList = document.getElementById(\"siteTogglesList\")\n\n  let currentFocusAreas = []\n  let siteToggles = {}\n\n  // Predefined sites to show in the popup\n  const predefinedSites = [\n    { domain: \"youtube.com\", name: \"YouTube\" },\n    { domain: \"reddit.com\", name: \"Reddit\" },\n    { domain: \"instagram.com\", name: \"Instagram\" },\n    { domain: \"facebook.com\", name: \"Facebook\" },\n    { domain: \"tiktok.com\", name: \"TikTok\" },\n    { domain: \"twitter.com\", name: \"Twitter\" },\n    { domain: \"x.com\", name: \"X\" },\n  ]\n\n  const chrome = window.chrome // Declare the chrome variable\n\n  async function loadFocusMode() {\n    try {\n      const result = await chrome.storage.local.get([\"focusMode\"])\n      const isOn = result.focusMode || false\n      updateUI(isOn)\n\n      chrome.runtime.sendMessage({\n        action: \"focusModeChanged\",\n        focusMode: isOn,\n      })\n    } catch (error) {\n      console.error(\"Error loading focus mode:\", error)\n      updateUI(false)\n    }\n  }\n\n  async function loadFocusAreas() {\n    try {\n      const result = await chrome.storage.local.get([\"focusAreas\"])\n      currentFocusAreas = result.focusAreas || []\n      renderFocusAreas()\n    } catch (error) {\n      console.error(\"Error loading focus areas:\", error)\n      currentFocusAreas = []\n      renderFocusAreas()\n    }\n  }\n\n  async function loadSiteToggles() {\n    try {\n      const result = await chrome.storage.local.get([\"siteToggles\"])\n      siteToggles = result.siteToggles || {}\n      renderSiteToggles()\n    } catch (error) {\n      console.error(\"Error loading site toggles:\", error)\n      siteToggles = {}\n      renderSiteToggles()\n    }\n  }\n\n  function renderSiteToggles() {\n    siteTogglesList.innerHTML = \"\"\n\n    predefinedSites.forEach((site) => {\n      const toggleItem = document.createElement(\"div\")\n      toggleItem.className = \"group\"\n\n      const currentState = siteToggles[site.domain] || \"smart\"\n\n      toggleItem.innerHTML = `\n  <div class=\"flex items-center justify-between p-3 bg-white border border-gray-100 rounded-lg hover:border-gray-200 hover:shadow-sm transition-all duration-200 group-hover:bg-gray-50\">\n    <div class=\"flex items-center gap-3\">\n      <div class=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n      <div>\n        <div class=\"text-sm font-medium text-gray-900\">${site.name}</div>\n        <div class=\"text-xs text-gray-500\">${site.domain}</div>\n      </div>\n    </div>\n    <div class=\"flex items-center gap-1 bg-gray-100 rounded-lg p-0.5\" data-site=\"${site.domain}\">\n      <button class=\"state-btn px-2 py-1 text-xs font-medium rounded-md transition-all duration-200 ${\n        currentState === \"blocked\" ? \"bg-red-500 text-white shadow-sm\" : \"text-gray-600 hover:bg-white hover:shadow-sm\"\n      }\" data-state=\"blocked\" title=\"Completely blocked\">\n        <div class=\"w-2 h-2 bg-current rounded-full\"></div>\n      </button>\n      <button class=\"state-btn px-2 py-1 text-xs font-medium rounded-md transition-all duration-200 ${\n        currentState === \"smart\" ? \"bg-amber-500 text-white shadow-sm\" : \"text-gray-600 hover:bg-white hover:shadow-sm\"\n      }\" data-state=\"smart\" title=\"AI evaluation\">\n        <div class=\"w-2 h-2 bg-current rounded-full\"></div>\n      </button>\n      <button class=\"state-btn px-2 py-1 text-xs font-medium rounded-md transition-all duration-200 ${\n        currentState === \"allowed\"\n          ? \"bg-green-500 text-white shadow-sm\"\n          : \"text-gray-600 hover:bg-white hover:shadow-sm\"\n      }\" data-state=\"allowed\" title=\"Always allowed\">\n        <div class=\"w-2 h-2 bg-current rounded-full\"></div>\n      </button>\n    </div>\n  </div>\n`\n\n      const stateButtons = toggleItem.querySelectorAll(\".state-btn\")\n      stateButtons.forEach((btn) => {\n        btn.addEventListener(\"click\", () => setSiteState(site.domain, btn.dataset.state))\n      })\n\n      siteTogglesList.appendChild(toggleItem)\n    })\n  }\n\n  async function setSiteState(site, state) {\n    try {\n      siteToggles[site] = state\n      await chrome.storage.local.set({ siteToggles })\n      renderSiteToggles()\n\n      chrome.runtime.sendMessage({\n        action: \"siteToggleChanged\",\n        site: site,\n        state: state,\n      })\n    } catch (error) {\n      console.error(\"Error setting site state:\", error)\n    }\n  }\n\n  function renderFocusAreas() {\n    focusAreasList.innerHTML = \"\"\n\n    if (currentFocusAreas.length === 0) {\n      emptyState.classList.remove(\"hidden\")\n    } else {\n      emptyState.classList.add(\"hidden\")\n\n      currentFocusAreas.forEach((area, index) => {\n        const focusAreaItem = document.createElement(\"div\")\n        focusAreaItem.className = \"group animate-in slide-in-from-top-2 duration-200\"\n        focusAreaItem.innerHTML = `\n          <div class=\"flex items-center justify-between p-3 bg-blue-50 border border-blue-100 rounded-lg group-hover:bg-blue-100 transition-all duration-200\">\n            <div class=\"flex items-center gap-3\">\n              <div class=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              <span class=\"text-sm font-medium text-blue-900\">${area}</span>\n            </div>\n            <button class=\"opacity-0 group-hover:opacity-100 w-6 h-6 flex items-center justify-center text-blue-600 hover:text-red-600 hover:bg-red-50 rounded-md transition-all duration-200\" data-index=\"${index}\" title=\"Remove ${area}\">\n              <svg class=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n              </svg>\n            </button>\n          </div>\n        `\n\n        const removeBtn = focusAreaItem.querySelector(\"button\")\n        removeBtn.addEventListener(\"click\", () => removeFocusArea(index))\n\n        focusAreasList.appendChild(focusAreaItem)\n      })\n    }\n  }\n\n  async function addFocusArea() {\n    const newArea = focusAreaInput.value.trim()\n\n    if (!newArea) {\n      focusAreaInput.focus()\n      return\n    }\n\n    const isDuplicate = currentFocusAreas.some((area) => area.toLowerCase() === newArea.toLowerCase())\n\n    if (isDuplicate) {\n      showNotification(\"This focus area already exists!\", \"error\")\n      focusAreaInput.value = \"\"\n      focusAreaInput.focus()\n      return\n    }\n\n    if (currentFocusAreas.length >= 8) {\n      showNotification(\"Maximum 8 focus areas allowed!\", \"error\")\n      return\n    }\n\n    try {\n      addFocusBtn.disabled = true\n      addFocusBtn.innerHTML = `\n        <svg class=\"w-4 h-4 animate-spin\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\n        </svg>\n      `\n\n      currentFocusAreas.push(newArea)\n      await chrome.storage.local.set({ focusAreas: currentFocusAreas })\n\n      focusAreaInput.value = \"\"\n      renderFocusAreas()\n\n      chrome.runtime.sendMessage({\n        action: \"focusAreasChanged\",\n        focusAreas: currentFocusAreas,\n      })\n\n      addFocusBtn.innerHTML = `\n        <svg class=\"w-4 h-4 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n        </svg>\n      `\n\n      setTimeout(() => {\n        addFocusBtn.innerHTML = \"Add\"\n        addFocusBtn.disabled = false\n        focusAreaInput.focus()\n      }, 1000)\n    } catch (error) {\n      console.error(\"Error adding focus area:\", error)\n      showNotification(\"Error adding focus area\", \"error\")\n      addFocusBtn.innerHTML = \"Add\"\n      addFocusBtn.disabled = false\n    }\n  }\n\n  async function removeFocusArea(index) {\n    try {\n      currentFocusAreas.splice(index, 1)\n      await chrome.storage.local.set({ focusAreas: currentFocusAreas })\n\n      renderFocusAreas()\n\n      chrome.runtime.sendMessage({\n        action: \"focusAreasChanged\",\n        focusAreas: currentFocusAreas,\n      })\n    } catch (error) {\n      console.error(\"Error removing focus area:\", error)\n      showNotification(\"Error removing focus area\", \"error\")\n    }\n  }\n\n  function showNotification(message, type = \"info\") {\n    // Simple notification - you could enhance this with a proper toast system\n    const notification = document.createElement(\"div\")\n    notification.className = `fixed top-4 right-4 px-4 py-2 rounded-lg text-sm font-medium z-50 ${\n      type === \"error\"\n        ? \"bg-red-100 text-red-800 border border-red-200\"\n        : \"bg-blue-100 text-blue-800 border border-blue-200\"\n    }`\n    notification.textContent = message\n    document.body.appendChild(notification)\n\n    setTimeout(() => {\n      notification.remove()\n    }, 3000)\n  }\n\n  function updateUI(isOn) {\n    if (isOn) {\n      statusDiv.textContent = \"Active and protecting your focus\"\n      statusDiv.className = \"text-sm text-green-600 font-medium\"\n      toggleBtn.textContent = \"Turn Off Focus Mode\"\n      toggleBtn.className =\n        \"w-full py-2.5 px-4 bg-red-500 hover:bg-red-600 text-white rounded-lg font-medium text-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2\"\n    } else {\n      statusDiv.textContent = \"Currently inactive\"\n      statusDiv.className = \"text-sm text-gray-500\"\n      toggleBtn.textContent = \"Turn On Focus Mode\"\n      toggleBtn.className =\n        \"w-full py-2.5 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium text-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n    }\n  }\n\n  async function toggleFocusMode() {\n    try {\n      const result = await chrome.storage.local.get([\"focusMode\"])\n      const currentState = result.focusMode || false\n      const newState = !currentState\n\n      await chrome.storage.local.set({ focusMode: newState })\n      updateUI(newState)\n\n      chrome.runtime.sendMessage({\n        action: \"focusModeChanged\",\n        focusMode: newState,\n      })\n    } catch (error) {\n      console.error(\"Error toggling focus mode:\", error)\n    }\n  }\n\n  // Event listeners\n  toggleBtn.addEventListener(\"click\", toggleFocusMode)\n  addFocusBtn.addEventListener(\"click\", addFocusArea)\n\n  focusAreaInput.addEventListener(\"keypress\", (e) => {\n    if (e.key === \"Enter\") {\n      addFocusArea()\n    }\n  })\n\n  // Auto-focus input\n  focusAreaInput.focus()\n\n  // Load initial data\n  loadFocusMode()\n  loadFocusAreas()\n  loadSiteToggles()\n})\n"],"names":["document","addEventListener","async","statusDiv","getElementById","toggleBtn","focusAreaInput","addFocusBtn","focusAreasList","emptyState","siteTogglesList","currentFocusAreas","siteToggles","predefinedSites","domain","name","chrome","window","renderSiteToggles","innerHTML","forEach","site","toggleItem","createElement","className","currentState","querySelectorAll","btn","state","storage","local","set","runtime","sendMessage","action","error","console","setSiteState","dataset","appendChild","renderFocusAreas","length","classList","remove","add","area","index","focusAreaItem","querySelector","splice","focusAreas","showNotification","removeFocusArea","addFocusArea","newArea","value","trim","some","toLowerCase","focus","disabled","push","setTimeout","message","type","notification","textContent","body","updateUI","isOn","newState","get","focusMode","e","key","loadFocusMode","result","loadFocusAreas","loadSiteToggles"],"sourceRoot":""}