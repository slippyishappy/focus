(()=>{"use strict";document.addEventListener("DOMContentLoaded",async()=>{const e=document.getElementById("status"),t=document.getElementById("toggleBtn"),o=document.getElementById("focusAreaInput"),n=document.getElementById("addFocusBtn"),s=document.getElementById("focusAreasList"),r=document.getElementById("emptyState"),a=document.getElementById("siteTogglesList");let d=[],i={};const c=[{domain:"youtube.com",name:"YouTube"},{domain:"reddit.com",name:"Reddit"},{domain:"instagram.com",name:"Instagram"},{domain:"facebook.com",name:"Facebook"},{domain:"tiktok.com",name:"TikTok"},{domain:"twitter.com",name:"Twitter"},{domain:"x.com",name:"X"}],l=window.chrome;function u(){a.innerHTML="",c.forEach(e=>{const t=document.createElement("div");t.className="group";const o=i[e.domain]||"smart";t.innerHTML=`\n  <div class="flex items-center justify-between p-3 bg-white border border-gray-100 rounded-lg hover:border-gray-200 hover:shadow-sm transition-all duration-200 group-hover:bg-gray-50">\n    <div class="flex items-center gap-3">\n      <div class="w-2 h-2 bg-gray-400 rounded-full"></div>\n      <div>\n        <div class="text-sm font-medium text-gray-900">${e.name}</div>\n        <div class="text-xs text-gray-500">${e.domain}</div>\n      </div>\n    </div>\n    <div class="flex items-center gap-1 bg-gray-100 rounded-lg p-0.5" data-site="${e.domain}">\n      <button class="state-btn px-2 py-1 text-xs font-medium rounded-md transition-all duration-200 ${"blocked"===o?"bg-red-500 text-white shadow-sm":"text-gray-600 hover:bg-white hover:shadow-sm"}" data-state="blocked" title="Completely blocked">\n        <div class="w-2 h-2 bg-current rounded-full"></div>\n      </button>\n      <button class="state-btn px-2 py-1 text-xs font-medium rounded-md transition-all duration-200 ${"smart"===o?"bg-amber-500 text-white shadow-sm":"text-gray-600 hover:bg-white hover:shadow-sm"}" data-state="smart" title="AI evaluation">\n        <div class="w-2 h-2 bg-current rounded-full"></div>\n      </button>\n      <button class="state-btn px-2 py-1 text-xs font-medium rounded-md transition-all duration-200 ${"allowed"===o?"bg-green-500 text-white shadow-sm":"text-gray-600 hover:bg-white hover:shadow-sm"}" data-state="allowed" title="Always allowed">\n        <div class="w-2 h-2 bg-current rounded-full"></div>\n      </button>\n    </div>\n  </div>\n`,t.querySelectorAll(".state-btn").forEach(t=>{t.addEventListener("click",()=>async function(e,t){try{i[e]=t,await l.storage.local.set({siteToggles:i}),u(),l.runtime.sendMessage({action:"siteToggleChanged",site:e,state:t})}catch(e){console.error("Error setting site state:",e)}}(e.domain,t.dataset.state))}),a.appendChild(t)})}function m(){s.innerHTML="",0===d.length?r.classList.remove("hidden"):(r.classList.add("hidden"),d.forEach((e,t)=>{const o=document.createElement("div");o.className="group animate-in slide-in-from-top-2 duration-200",o.innerHTML=`\n          <div class="flex items-center justify-between p-3 bg-blue-50 border border-blue-100 rounded-lg group-hover:bg-blue-100 transition-all duration-200">\n            <div class="flex items-center gap-3">\n              <div class="w-2 h-2 bg-blue-500 rounded-full"></div>\n              <span class="text-sm font-medium text-blue-900">${e}</span>\n            </div>\n            <button class="opacity-0 group-hover:opacity-100 w-6 h-6 flex items-center justify-center text-blue-600 hover:text-red-600 hover:bg-red-50 rounded-md transition-all duration-200" data-index="${t}" title="Remove ${e}">\n              <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>\n              </svg>\n            </button>\n          </div>\n        `,o.querySelector("button").addEventListener("click",()=>async function(e){try{d.splice(e,1),await l.storage.local.set({focusAreas:d}),m(),l.runtime.sendMessage({action:"focusAreasChanged",focusAreas:d})}catch(e){console.error("Error removing focus area:",e),f("Error removing focus area","error")}}(t)),s.appendChild(o)}))}async function g(){const e=o.value.trim();if(e){if(d.some(t=>t.toLowerCase()===e.toLowerCase()))return f("This focus area already exists!","error"),o.value="",void o.focus();if(d.length>=8)f("Maximum 8 focus areas allowed!","error");else try{n.disabled=!0,n.innerHTML='\n        <svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>\n        </svg>\n      ',d.push(e),await l.storage.local.set({focusAreas:d}),o.value="",m(),l.runtime.sendMessage({action:"focusAreasChanged",focusAreas:d}),n.innerHTML='\n        <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>\n        </svg>\n      ',setTimeout(()=>{n.innerHTML="Add",n.disabled=!1,o.focus()},1e3)}catch(e){console.error("Error adding focus area:",e),f("Error adding focus area","error"),n.innerHTML="Add",n.disabled=!1}}else o.focus()}function f(e,t="info"){const o=document.createElement("div");o.className="fixed top-4 right-4 px-4 py-2 rounded-lg text-sm font-medium z-50 "+("error"===t?"bg-red-100 text-red-800 border border-red-200":"bg-blue-100 text-blue-800 border border-blue-200"),o.textContent=e,document.body.appendChild(o),setTimeout(()=>{o.remove()},3e3)}function h(o){o?(e.textContent="Active and protecting your focus",e.className="text-sm text-green-600 font-medium",t.textContent="Turn Off Focus Mode",t.className="w-full py-2.5 px-4 bg-red-500 hover:bg-red-600 text-white rounded-lg font-medium text-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"):(e.textContent="Currently inactive",e.className="text-sm text-gray-500",t.textContent="Turn On Focus Mode",t.className="w-full py-2.5 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium text-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2")}t.addEventListener("click",async function(){try{const e=!(await l.storage.local.get(["focusMode"])).focusMode;await l.storage.local.set({focusMode:e}),h(e),l.runtime.sendMessage({action:"focusModeChanged",focusMode:e})}catch(e){console.error("Error toggling focus mode:",e)}}),n.addEventListener("click",g),o.addEventListener("keypress",e=>{"Enter"===e.key&&g()}),o.focus(),async function(){try{const e=(await l.storage.local.get(["focusMode"])).focusMode||!1;h(e),l.runtime.sendMessage({action:"focusModeChanged",focusMode:e})}catch(e){console.error("Error loading focus mode:",e),h(!1)}}(),async function(){try{const e=await l.storage.local.get(["focusAreas"]);d=e.focusAreas||[],m()}catch(e){console.error("Error loading focus areas:",e),d=[],m()}}(),async function(){try{const e=await l.storage.local.get(["siteToggles"]);i=e.siteToggles||{},u()}catch(e){console.error("Error loading site toggles:",e),i={},u()}}()})})();
//# sourceMappingURL=popup.bundle.js.map