(()=>{function e(e){const o=e?"ON":"",t=e?"#e74c3c":"#27ae60";chrome.action.setBadgeText({text:o}),chrome.action.setBadgeBackgroundColor({color:t})}chrome.runtime.onInstalled.addListener(async()=>{try{const e=await chrome.storage.local.get(["focusMode","focusAreas"]);void 0===e.focusMode&&(await chrome.storage.local.set({focusMode:!1}),console.log("Focus Mode initialized to OFF")),void 0===e.focusAreas&&(await chrome.storage.local.set({focusAreas:[]}),console.log("Focus Areas initialized to empty array"))}catch(e){console.error("Error initializing extension:",e)}}),chrome.runtime.onMessage.addListener((o,t,n)=>{if("focusModeChanged"===o.action&&(console.log("Focus Mode changed to:",o.focusMode),e(o.focusMode)),"focusAreasChanged"===o.action&&console.log("Focus Areas changed to:",o.focusAreas),"getFocusMode"===o.action)return chrome.storage.local.get(["focusMode"]).then(e=>{n({focusMode:e.focusMode||!1})}),!0;if("evaluateContent"===o.action){const{content:e,focusAreas:t}=o;return console.log("Evaluating content:",e,"for focus areas:",t),async function(e,o){const t=function(e,o){return`My current focus areas are: "${o.join(", ")}". \n\nThe content I'm about to view is: "${e}".\n\nPlease analyze if this content is relevant to any of my focus areas and will help me stay productive and focused on my goals. Consider:\n- Is this educational or informative content related to any of my focus areas?\n- Will this content help me achieve my current objectives in any of these areas?\n- Is this content likely to be a distraction from all of my focus areas?\n\nRespond with only "yes" if the content is relevant and helpful to at least one focus area, or "no" if it's likely to be distracting or irrelevant to all focus areas.`}(e,o);try{const e=await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=AIzaSyCyBRDfsGGm7cmTmQ6OTySLXuxJdM65av0",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:t}]}]})});if(!e.ok)throw new Error(`API request failed: ${e.status}`);const o=await e.json(),n=o.candidates?.[0]?.content?.parts?.[0]?.text?.toLowerCase().trim();return console.log("Gemini response:",n),n?.includes("yes")&&!n?.includes("no")}catch(t){return console.error("Error calling Gemini API:",t),function(e,o){if(!o||0===o.length||!e)return!1;const t=e.toLowerCase(),n=["learn","study","tutorial","education","course","programming","code","math","science","research","analysis","guide","how to","documentation","lecture","lesson","training","skill","development"].some(e=>t.includes(e)),a=o.some(e=>e.toLowerCase().split(" ").some(e=>t.includes(e)));return n||a}(e,o)}}(e,t).then(o=>{n({isRelevant:o,content:e,focusAreas:t,evaluationMethod:"gemini"})}).catch(o=>{console.error("Error in content evaluation:",o),n({isRelevant:!1,content:e,focusAreas:t,evaluationMethod:"error_fallback"})}),!0}}),chrome.runtime.onStartup.addListener(()=>{console.log("Focus Mode extension started")}),chrome.runtime.onStartup.addListener(async()=>{try{e((await chrome.storage.local.get(["focusMode"])).focusMode||!1)}catch(e){console.error("Error setting initial badge:",e)}})})();
//# sourceMappingURL=background.bundle.js.map