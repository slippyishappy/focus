{"version":3,"file":"background.bundle.js","mappings":"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","sources":["webpack://focus/./src/background.js"],"sourcesContent":["// Initialize focus mode state when extension is installed\nchrome.runtime.onInstalled.addListener(async () => {\n  try {\n    const result = await chrome.storage.local.get([\"focusMode\", \"focusAreas\", \"siteToggles\"])\n    if (result.focusMode === undefined) {\n      await chrome.storage.local.set({ focusMode: false })\n      console.log(\"Focus Mode initialized to OFF\")\n    }\n    if (result.focusAreas === undefined) {\n      await chrome.storage.local.set({ focusAreas: [] })\n      console.log(\"Focus Areas initialized to empty array\")\n    }\n    if (result.siteToggles === undefined) {\n      await chrome.storage.local.set({ siteToggles: {} })\n      console.log(\"Site Toggles initialized to empty object\")\n    }\n  } catch (error) {\n    console.error(\"Error initializing extension:\", error)\n  }\n})\n\n// Prepare prompt for Gemini API\nfunction prepareGeminiPrompt(content, focusAreas) {\n  const focusAreasText = focusAreas.join(\", \")\n  return `My current focus areas are: \"${focusAreasText}\". \n\nThe content I'm about to view is: \"${content}\".\n\nPlease analyze if this content is relevant to any of my focus areas and will help me stay productive and focused on my goals. Consider:\n- Is this educational or informative content related to any of my focus areas?\n- Will this content help me achieve my current objectives in any of these areas?\n- Is this content likely to be a distraction from all of my focus areas?\n\nRespond with only \"yes\" if the content is relevant and helpful to at least one focus area, or \"no\" if it's likely to be distracting or irrelevant to all focus areas.`\n}\n\n// Gemini API call\nasync function evaluateContentWithGemini(content, focusAreas) {\n  const API_KEY = process.env.GEMINI_API_KEY\n\n  if (!API_KEY) {\n    console.error(\"Gemini API key not found\")\n    return isContentRelevantFallback(content, focusAreas)\n  }\n\n  const prompt = prepareGeminiPrompt(content, focusAreas)\n\n  try {\n    const response = await fetch(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          contents: [\n            {\n              parts: [{ text: prompt }],\n            },\n          ],\n        }),\n      },\n    )\n\n    if (!response.ok) {\n      throw new Error(`API request failed: ${response.status}`)\n    }\n\n    const data = await response.json()\n    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text?.toLowerCase().trim()\n\n    console.log(\"Gemini response:\", generatedText)\n\n    // Parse the response\n    const isRelevant = generatedText?.includes(\"yes\") && !generatedText?.includes(\"no\")\n\n    return isRelevant\n  } catch (error) {\n    console.error(\"Error calling Gemini API:\", error)\n    // Fallback to simple keyword matching\n    return isContentRelevantFallback(content, focusAreas)\n  }\n}\n\n// Fallback function for when API fails\nfunction isContentRelevantFallback(content, focusAreas) {\n  if (!focusAreas || focusAreas.length === 0 || !content) {\n    return false\n  }\n\n  const contentLower = content.toLowerCase()\n\n  // Educational keywords that are generally considered productive\n  const educationalKeywords = [\n    \"learn\",\n    \"study\",\n    \"tutorial\",\n    \"education\",\n    \"course\",\n    \"programming\",\n    \"code\",\n    \"math\",\n    \"science\",\n    \"research\",\n    \"analysis\",\n    \"guide\",\n    \"how to\",\n    \"documentation\",\n    \"lecture\",\n    \"lesson\",\n    \"training\",\n    \"skill\",\n    \"development\",\n  ]\n\n  // Check if content contains educational keywords\n  const hasEducationalContent = educationalKeywords.some((keyword) => contentLower.includes(keyword))\n\n  // Check if content matches any focus area\n  const matchesAnyFocusArea = focusAreas.some((focusArea) => {\n    const focusKeywords = focusArea.toLowerCase().split(\" \")\n    return focusKeywords.some((keyword) => contentLower.includes(keyword))\n  })\n\n  return hasEducationalContent || matchesAnyFocusArea\n}\n\n// Listen for messages from popup or content scripts\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.action === \"focusModeChanged\") {\n    console.log(\"Focus Mode changed to:\", message.focusMode)\n    updateExtensionIcon(message.focusMode)\n  }\n\n  if (message.action === \"focusAreasChanged\") {\n    console.log(\"Focus Areas changed to:\", message.focusAreas)\n  }\n\n  if (message.action === \"siteTogglesChanged\") {\n    console.log(\"Site Toggles changed to:\", message.siteToggles)\n  }\n\n  if (message.action === \"getFocusMode\") {\n    chrome.storage.local.get([\"focusMode\"]).then((result) => {\n      sendResponse({ focusMode: result.focusMode || false })\n    })\n    return true\n  }\n\n  if (message.action === \"evaluateContent\") {\n    const { content, focusAreas } = message\n    console.log(\"Evaluating content:\", content, \"for focus areas:\", focusAreas)\n\n    // Use Gemini API for evaluation\n    evaluateContentWithGemini(content, focusAreas)\n      .then((isRelevant) => {\n        sendResponse({\n          isRelevant,\n          content,\n          focusAreas,\n          evaluationMethod: process.env.GEMINI_API_KEY ? \"gemini\" : \"fallback\",\n        })\n      })\n      .catch((error) => {\n        console.error(\"Error in content evaluation:\", error)\n        sendResponse({\n          isRelevant: false,\n          content,\n          focusAreas,\n          evaluationMethod: \"error_fallback\",\n        })\n      })\n\n    return true // Keep message channel open for async response\n  }\n})\n\n// Update extension icon based on focus mode state\nfunction updateExtensionIcon(isOn) {\n  const badgeText = isOn ? \"ON\" : \"\"\n  const badgeColor = isOn ? \"#e74c3c\" : \"#27ae60\"\n\n  chrome.action.setBadgeText({ text: badgeText })\n  chrome.action.setBadgeBackgroundColor({ color: badgeColor })\n}\n\n// Keep service worker alive\nchrome.runtime.onStartup.addListener(() => {\n  console.log(\"Focus Mode extension started\")\n})\n\n// Initialize badge on startup\nchrome.runtime.onStartup.addListener(async () => {\n  try {\n    const result = await chrome.storage.local.get([\"focusMode\"])\n    updateExtensionIcon(result.focusMode || false)\n  } catch (error) {\n    console.error(\"Error setting initial badge:\", error)\n  }\n})\n"],"names":["updateExtensionIcon","isOn","badgeText","badgeColor","chrome","action","setBadgeText","text","setBadgeBackgroundColor","color","runtime","onInstalled","addListener","async","result","storage","local","get","undefined","focusMode","set","console","log","focusAreas","siteToggles","error","onMessage","message","sender","sendResponse","then","content","prompt","join","prepareGeminiPrompt","response","fetch","method","headers","body","JSON","stringify","contents","parts","ok","Error","status","data","json","generatedText","candidates","toLowerCase","trim","includes","length","contentLower","hasEducationalContent","some","keyword","matchesAnyFocusArea","focusArea","split","isContentRelevantFallback","evaluateContentWithGemini","isRelevant","evaluationMethod","catch","onStartup"],"sourceRoot":""}